/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace LeagueMaker {
  export type LeagueStruct = {
    leagueId: BigNumberish;
    status: BigNumberish;
    winner: string;
    openTime: BigNumberish;
    liveTime: BigNumberish;
    closeTime: BigNumberish;
    minEntry: BigNumberish;
    totalPrize: BigNumberish;
    prizePerPlayer: BigNumberish;
    exists: boolean;
  };

  export type LeagueStructOutput = [
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    leagueId: BigNumber;
    status: number;
    winner: string;
    openTime: BigNumber;
    liveTime: BigNumber;
    closeTime: BigNumber;
    minEntry: BigNumber;
    totalPrize: BigNumber;
    prizePerPlayer: BigNumber;
    exists: boolean;
  };
}

export interface LeagueMakerInterface extends utils.Interface {
  functions: {
    "claimPrize(uint256)": FunctionFragment;
    "closeLeague(uint256,string[])": FunctionFragment;
    "joinLeague(uint256,string)": FunctionFragment;
    "lastLeagueId()": FunctionFragment;
    "liveLeague(uint256)": FunctionFragment;
    "openLeague(string,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminState(address,bool)": FunctionFragment;
    "toggleBlockPlayer(uint256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewClosedLeagues()": FunctionFragment;
    "viewLiveLeagues()": FunctionFragment;
    "viewOpenLeagues()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimPrize"
      | "closeLeague"
      | "joinLeague"
      | "lastLeagueId"
      | "liveLeague"
      | "openLeague"
      | "owner"
      | "renounceOwnership"
      | "setAdminState"
      | "toggleBlockPlayer"
      | "transferOwnership"
      | "viewClosedLeagues"
      | "viewLiveLeagues"
      | "viewOpenLeagues"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLeague",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinLeague",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLeagueId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liveLeague",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openLeague",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminState",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleBlockPlayer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewClosedLeagues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewLiveLeagues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewOpenLeagues",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinLeague", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastLeagueId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liveLeague", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openLeague", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleBlockPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewClosedLeagues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewLiveLeagues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewOpenLeagues",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "leagueClosed(uint256,uint256,string[],uint256)": EventFragment;
    "leagueCreated(uint256,string,uint256,uint256)": EventFragment;
    "leagueJoined(uint256,uint256,address,string,bool)": EventFragment;
    "leagueLive(uint256,uint256)": EventFragment;
    "prizeClaimed(uint256,uint256,address,string,uint256)": EventFragment;
    "setAdminStateEvent(address,bool)": EventFragment;
    "toggleBlockPlayerEvent(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueLive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "prizeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setAdminStateEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "toggleBlockPlayerEvent"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface leagueClosedEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _winners: string[];
  _prizePerParticipant: BigNumber;
}
export type leagueClosedEvent = TypedEvent<
  [BigNumber, BigNumber, string[], BigNumber],
  leagueClosedEventObject
>;

export type leagueClosedEventFilter = TypedEventFilter<leagueClosedEvent>;

export interface leagueCreatedEventObject {
  _leagueId: BigNumber;
  _gameName: string;
  _time: BigNumber;
  _minEntry: BigNumber;
}
export type leagueCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  leagueCreatedEventObject
>;

export type leagueCreatedEventFilter = TypedEventFilter<leagueCreatedEvent>;

export interface leagueJoinedEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _pAddress: string;
  _nickName: string;
  isBlocked: boolean;
}
export type leagueJoinedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, boolean],
  leagueJoinedEventObject
>;

export type leagueJoinedEventFilter = TypedEventFilter<leagueJoinedEvent>;

export interface leagueLiveEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
}
export type leagueLiveEvent = TypedEvent<
  [BigNumber, BigNumber],
  leagueLiveEventObject
>;

export type leagueLiveEventFilter = TypedEventFilter<leagueLiveEvent>;

export interface prizeClaimedEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _pAddress: string;
  _nickName: string;
  _amount: BigNumber;
}
export type prizeClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  prizeClaimedEventObject
>;

export type prizeClaimedEventFilter = TypedEventFilter<prizeClaimedEvent>;

export interface setAdminStateEventEventObject {
  userAddr: string;
  state: boolean;
}
export type setAdminStateEventEvent = TypedEvent<
  [string, boolean],
  setAdminStateEventEventObject
>;

export type setAdminStateEventEventFilter =
  TypedEventFilter<setAdminStateEventEvent>;

export interface toggleBlockPlayerEventEventObject {
  _leagueId: BigNumber;
  _name: string;
}
export type toggleBlockPlayerEventEvent = TypedEvent<
  [BigNumber, string],
  toggleBlockPlayerEventEventObject
>;

export type toggleBlockPlayerEventEventFilter =
  TypedEventFilter<toggleBlockPlayerEventEvent>;

export interface LeagueMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeagueMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimPrize(
      _leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeLeague(
      _leagueId: BigNumberish,
      _winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinLeague(
      _leagueId: BigNumberish,
      _nickName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastLeagueId(overrides?: CallOverrides): Promise<[BigNumber]>;

    liveLeague(
      _leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openLeague(
      _gameName: string,
      _minEntry: BigNumberish,
      _liveTime: BigNumberish,
      _closeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdminState(
      userAddr: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleBlockPlayer(
      _leagueId: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewClosedLeagues(
      overrides?: CallOverrides
    ): Promise<[LeagueMaker.LeagueStructOutput[]]>;

    viewLiveLeagues(
      overrides?: CallOverrides
    ): Promise<[LeagueMaker.LeagueStructOutput[]]>;

    viewOpenLeagues(
      overrides?: CallOverrides
    ): Promise<[LeagueMaker.LeagueStructOutput[]]>;
  };

  claimPrize(
    _leagueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeLeague(
    _leagueId: BigNumberish,
    _winners: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinLeague(
    _leagueId: BigNumberish,
    _nickName: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastLeagueId(overrides?: CallOverrides): Promise<BigNumber>;

  liveLeague(
    _leagueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openLeague(
    _gameName: string,
    _minEntry: BigNumberish,
    _liveTime: BigNumberish,
    _closeTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdminState(
    userAddr: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleBlockPlayer(
    _leagueId: BigNumberish,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewClosedLeagues(
    overrides?: CallOverrides
  ): Promise<LeagueMaker.LeagueStructOutput[]>;

  viewLiveLeagues(
    overrides?: CallOverrides
  ): Promise<LeagueMaker.LeagueStructOutput[]>;

  viewOpenLeagues(
    overrides?: CallOverrides
  ): Promise<LeagueMaker.LeagueStructOutput[]>;

  callStatic: {
    claimPrize(
      _leagueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeLeague(
      _leagueId: BigNumberish,
      _winners: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinLeague(
      _leagueId: BigNumberish,
      _nickName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastLeagueId(overrides?: CallOverrides): Promise<BigNumber>;

    liveLeague(
      _leagueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openLeague(
      _gameName: string,
      _minEntry: BigNumberish,
      _liveTime: BigNumberish,
      _closeTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminState(
      userAddr: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleBlockPlayer(
      _leagueId: BigNumberish,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewClosedLeagues(
      overrides?: CallOverrides
    ): Promise<LeagueMaker.LeagueStructOutput[]>;

    viewLiveLeagues(
      overrides?: CallOverrides
    ): Promise<LeagueMaker.LeagueStructOutput[]>;

    viewOpenLeagues(
      overrides?: CallOverrides
    ): Promise<LeagueMaker.LeagueStructOutput[]>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "leagueClosed(uint256,uint256,string[],uint256)"(
      _leagueId?: null,
      _time?: null,
      _winners?: null,
      _prizePerParticipant?: null
    ): leagueClosedEventFilter;
    leagueClosed(
      _leagueId?: null,
      _time?: null,
      _winners?: null,
      _prizePerParticipant?: null
    ): leagueClosedEventFilter;

    "leagueCreated(uint256,string,uint256,uint256)"(
      _leagueId?: null,
      _gameName?: null,
      _time?: null,
      _minEntry?: null
    ): leagueCreatedEventFilter;
    leagueCreated(
      _leagueId?: null,
      _gameName?: null,
      _time?: null,
      _minEntry?: null
    ): leagueCreatedEventFilter;

    "leagueJoined(uint256,uint256,address,string,bool)"(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      isBlocked?: null
    ): leagueJoinedEventFilter;
    leagueJoined(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      isBlocked?: null
    ): leagueJoinedEventFilter;

    "leagueLive(uint256,uint256)"(
      _leagueId?: null,
      _time?: null
    ): leagueLiveEventFilter;
    leagueLive(_leagueId?: null, _time?: null): leagueLiveEventFilter;

    "prizeClaimed(uint256,uint256,address,string,uint256)"(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      _amount?: null
    ): prizeClaimedEventFilter;
    prizeClaimed(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      _amount?: null
    ): prizeClaimedEventFilter;

    "setAdminStateEvent(address,bool)"(
      userAddr?: null,
      state?: null
    ): setAdminStateEventEventFilter;
    setAdminStateEvent(
      userAddr?: null,
      state?: null
    ): setAdminStateEventEventFilter;

    "toggleBlockPlayerEvent(uint256,string)"(
      _leagueId?: null,
      _name?: null
    ): toggleBlockPlayerEventEventFilter;
    toggleBlockPlayerEvent(
      _leagueId?: null,
      _name?: null
    ): toggleBlockPlayerEventEventFilter;
  };

  estimateGas: {
    claimPrize(
      _leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeLeague(
      _leagueId: BigNumberish,
      _winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinLeague(
      _leagueId: BigNumberish,
      _nickName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastLeagueId(overrides?: CallOverrides): Promise<BigNumber>;

    liveLeague(
      _leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openLeague(
      _gameName: string,
      _minEntry: BigNumberish,
      _liveTime: BigNumberish,
      _closeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdminState(
      userAddr: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleBlockPlayer(
      _leagueId: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewClosedLeagues(overrides?: CallOverrides): Promise<BigNumber>;

    viewLiveLeagues(overrides?: CallOverrides): Promise<BigNumber>;

    viewOpenLeagues(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimPrize(
      _leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeLeague(
      _leagueId: BigNumberish,
      _winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinLeague(
      _leagueId: BigNumberish,
      _nickName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastLeagueId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liveLeague(
      _leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openLeague(
      _gameName: string,
      _minEntry: BigNumberish,
      _liveTime: BigNumberish,
      _closeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdminState(
      userAddr: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleBlockPlayer(
      _leagueId: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewClosedLeagues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewLiveLeagues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewOpenLeagues(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
